name: CI
on: [push, pull_request]
jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Slack start notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: plantit-dev
          SLACK_ICON: https://raw.githubusercontent.com/Computational-Plant-Science/plantit/master/plantit/front_end/src/assets/logo-favicon.png
          SLACK_MESSAGE: 'Build started'
          SLACK_TITLE: PlantIT CLI CI
          SLACK_USERNAME: plantit-cli
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        env:
          SINGULARITY_VERSION: ${{ secrets.SINGULARITY_VERSION }}
        run: |
          # python
          python -m pip install --upgrade pip
          pip install flake8 pytest coveralls setuptools wheel twine
          pip install -e .
          # singularity
          wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz
          tar -xzf singularity-ce-${SINGULARITY_VERSION}.tar.gz
          cd singularity-ce-${SINGULARITY_VERSION}
          ./mconfig
          make -C builddir
          sudo make -C builddir install
          cd ..
      - name: Lint
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test
        env:
          TEST_DIRECTORY: ${{ secrets.TEST_DIRECTORY }}
          CYVERSE_USERNAME: ${{ secrets.CYVERSE_USERNAME }}
          CYVERSE_PASSWORD: ${{ secrets.CYVERSE_PASSWORD }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true
        run: |
          mkdir -p /opt/plantit-cli/runs/
          coverage run --source=plantit_cli -m pytest /home/runner/work/plantit-cli/plantit-cli/plantit_cli/tests/unit -s
          coveralls
  # integration-tests:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 1
  #     matrix:
  #       python-version: [3.6]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install dependencies
  #       env:
  #         SINGULARITY_VERSION: ${{ secrets.SINGULARITY_VERSION }}
  #       run: |
  #         # python
  #         python -m pip install --upgrade pip
  #         pip install flake8 pytest coveralls setuptools wheel twine
  #         pip install -e .
  #         # singularity
  #         wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-${SINGULARITY_VERSION}.tar.gz
  #         tar -xzf singularity-${SINGULARITY_VERSION}.tar.gz
  #         cd singularity
  #         ./mconfig
  #         make -C builddir
  #         sudo make -C builddir install
  #         cd ..
  #     - name: Lint
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #     - name: Test
  #       env:
  #         TEST_DIRECTORY: ${{ secrets.TEST_DIRECTORY }}
  #         CYVERSE_USERNAME: ${{ secrets.CYVERSE_USERNAME }}
  #         CYVERSE_PASSWORD: ${{ secrets.CYVERSE_PASSWORD }}
  #         COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
  #         COVERALLS_PARALLEL: true
  #       run: |
  #         mkdir -p /opt/plantit-cli/runs/
  #         coverage run --source=plantit_cli -m pytest /home/runner/work/plantit-cli/plantit-cli/plantit_cli/tests/integration
  #         coveralls
  #     - name: Update Coveralls
  #       run: |
  #         coveralls --finish
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish:
    needs: [unit-tests]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        env:
          SINGULARITY_VERSION: ${{ secrets.SINGULARITY_VERSION }}
        run: |
          # python
          python -m pip install --upgrade pip
          pip install flake8 pytest coveralls setuptools wheel twine
          pip install -e .
      - name: Publish package
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          old_version=$(pip install plantit-cli==random 2>&1 >/dev/null | sed 's|.*, \([^ ]*\)).*|\1|g' | head -n 1 | xargs)
          new_version=$(pip show plantit-cli | sed 's|.*Version: \([^ ]*\).*|\1|g' | sed -n 2p)
          echo "$old_version"
          echo "$new_version"
          if ! [[ "$new_version" = "$old_version" ]]; then
            python setup.py sdist bdist_wheel
            python -m twine upload dist/*
          fi
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build & push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker build -t computationalplantscience/plantit-sandbox --no-cache -f dockerfiles/sandbox/Dockerfile .
          docker push computationalplantscience/plantit-sandbox
      - name: Slack success notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: plantit-dev
          SLACK_ICON: https://raw.githubusercontent.com/Computational-Plant-Science/plantit/master/plantit/front_end/src/assets/logo-favicon.png
          SLACK_MESSAGE: 'Build succeeded'
          SLACK_TITLE: PlantIT CLI CI
          SLACK_USERNAME: plantit-cli